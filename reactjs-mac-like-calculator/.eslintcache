[{"C:\\_lucas.sqa\\experiments-comparing-frameworks\\reactjs-mac-like-calculator\\src\\index.js":"1","C:\\_lucas.sqa\\experiments-comparing-frameworks\\reactjs-mac-like-calculator\\src\\main\\Calculator.jsx":"2","C:\\_lucas.sqa\\experiments-comparing-frameworks\\reactjs-mac-like-calculator\\src\\components\\Button.jsx":"3","C:\\_lucas.sqa\\experiments-comparing-frameworks\\reactjs-mac-like-calculator\\src\\components\\Display.jsx":"4"},{"size":247,"mtime":1611253277007,"results":"5","hashOfConfig":"6"},{"size":3488,"mtime":1611259793847,"results":"7","hashOfConfig":"6"},{"size":484,"mtime":1611255736467,"results":"8","hashOfConfig":"6"},{"size":189,"mtime":1611254012449,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1yuibgf",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"C:\\_lucas.sqa\\experiments-comparing-frameworks\\reactjs-mac-like-calculator\\src\\index.js",[],["20","21"],"C:\\_lucas.sqa\\experiments-comparing-frameworks\\reactjs-mac-like-calculator\\src\\main\\Calculator.jsx",["22"],"import React, { Component } from 'react'\r\nimport './Calculator.css'\r\n\r\nimport Button from '../components/Button'\r\nimport Display from '../components/Display'\r\n\r\nconst initialState = {\r\n    displayValue: '0',\r\n    clearDisplay: false,\r\n    operation: null,\r\n    values: [0, 0],\r\n    current: 0\r\n}\r\n\r\nexport default class Calculator extends Component {\r\n    state = { ...initialState }\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.clearMemory = this.clearMemory.bind(this)\r\n        this.setOperation = this.setOperation.bind(this)\r\n        this.addDigit = this.addDigit.bind(this)\r\n    }\r\n\r\n    clearMemory() {\r\n        this.setState({ ...initialState })\r\n    }\r\n\r\n    setOperation(operation) {\r\n        if(this.state.current === 0) {\r\n            this.setState({ operation, current: 1, clearDisplay: true })\r\n        } else {\r\n            const equals = operation === '='\r\n            const currentOperation = this.state.operation\r\n            const values = [ ...this.state.values ]\r\n\r\n            try {\r\n                values[0] = eval(`${values[0]} ${currentOperation} ${values[1]}`)\r\n            } catch(e) {\r\n                values[0] = this.state.values[0]\r\n            }\r\n            \r\n            values[1] = 0\r\n\r\n            this.setState({\r\n                displayValue: values[0],\r\n                operation: equals ? null : operation,\r\n                current: equals ? 0 : 1,\r\n                clearDisplay: !equals,\r\n                values\r\n            })\r\n        }\r\n    }\r\n\r\n    addDigit(n) {\r\n        if(n === '.' && this.state.displayValue.includes('.')) {\r\n            return\r\n        }\r\n\r\n        const clearDisplay = this.state.displayValue === '0'\r\n            || this.state.clearDisplay\r\n\r\n        const currentValue = clearDisplay ? '' : this.state.displayValue\r\n\r\n        const displayValue = currentValue + n\r\n\r\n        this.setState({ displayValue, clearDisplay: false })\r\n\r\n        if(n !== '.') {\r\n            const i = this.state.current\r\n            const newValue = parseFloat(displayValue)\r\n            const values = [ ...this.state.values ]\r\n            values[i] = newValue\r\n            \r\n            this.setState({ values })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"calculator\">\r\n                <Display value={this.state.displayValue} />\r\n                <Button label=\"AC\" click={this.clearMemory} triple />\r\n                <Button label=\"/\" click={this.setOperation} operation />\r\n                <Button label=\"7\" click={this.addDigit} />\r\n                <Button label=\"8\" click={this.addDigit} />\r\n                <Button label=\"9\" click={this.addDigit} />\r\n                <Button label=\"*\" click={this.setOperation} operation />\r\n                <Button label=\"4\" click={this.addDigit} />\r\n                <Button label=\"5\" click={this.addDigit} />\r\n                <Button label=\"6\" click={this.addDigit} />\r\n                <Button label=\"-\" click={this.setOperation} operation />\r\n                <Button label=\"1\" click={this.addDigit} />\r\n                <Button label=\"2\" click={this.addDigit} />\r\n                <Button label=\"3\" click={this.addDigit} />\r\n                <Button label=\"+\" click={this.setOperation} operation />\r\n                <Button label=\"0\" click={this.addDigit} double />\r\n                <Button label=\".\" click={this.addDigit} />\r\n                <Button label=\"=\" click={this.setOperation} operation />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","C:\\_lucas.sqa\\experiments-comparing-frameworks\\reactjs-mac-like-calculator\\src\\components\\Button.jsx",[],"C:\\_lucas.sqa\\experiments-comparing-frameworks\\reactjs-mac-like-calculator\\src\\components\\Display.jsx",[],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":38,"column":29,"nodeType":"29","messageId":"30","endLine":38,"endColumn":33},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"no-eval","eval can be harmful.","CallExpression","unexpected","no-global-assign","no-unsafe-negation"]